/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lectureinitializer;

import java.io.*;
import java.time.*;
import java.util.*;
import java.util.stream.*;

import org.testng.*;
import org.testng.annotations.*;

public class TalkAssignmentsTest {

    @DataProvider
    public Object[][] talkAssignmentsData() {
        final TopicAssignment a1 = new TopicAssignment("P1", "T1");
        final TopicAssignment a2 = new TopicAssignment("P2", "T2");
        final TopicAssignment a3 = new TopicAssignment("P3", "T3");
        final TopicAssignment a4 = new TopicAssignment("P4", "T4");
        final TopicAssignment a5 = new TopicAssignment("P5", "T5");
        final TopicAssignment a6 = new TopicAssignment("P6", "T6");
        final TopicAssignment a7 = new TopicAssignment("P7", "T7");
        final LocalDateTime d1 = LocalDateTime.of(2024, 10, 11, 9, 45);
        final LocalDateTime d2 = LocalDateTime.of(2024, 10, 11, 10, 30);
        final LocalDateTime d3 = LocalDateTime.of(2024, 10, 11, 11, 30);
        final LocalDateTime d4 = LocalDateTime.of(2024, 10, 11, 12, 15);
        final LocalDateTime d5 = LocalDateTime.of(2024, 10, 12, 9, 45);
        final LocalDateTime d6 = LocalDateTime.of(2024, 10, 12, 10, 30);
        final LocalDateTime d7 = LocalDateTime.of(2024, 10, 12, 11, 30);
        final LocalDateTime d8 = LocalDateTime.of(2024, 10, 12, 12, 15);
        final LocalDateTime d9 = LocalDateTime.of(2024, 10, 13, 9, 45);
        final LocalDateTime d10 = LocalDateTime.of(2024, 10, 13, 10, 30);
        final LocalDateTime d11 = LocalDateTime.of(2024, 10, 13, 11, 30);
        final LocalDateTime d12 = LocalDateTime.of(2024, 10, 13, 12, 15);
        return new Object[][] {
            {
                new BufferedReader(new StringReader("P1 -> T1")),
                List.of(d1, d2, d3, d4),
                List.of(new TalkAssignment(a1, d1))
            },
            {
                new BufferedReader(
                    new StringReader(
                        List.of(a1, a2, a3, a4, a5, a6, a7)
                        .stream()
                        .map(ass -> String.format("%s -> %s", ass.participant(), ass.topic()))
                        .collect(Collectors.joining("\n"))
                    )
                ),
                List.of(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12),
                List.of(
                    new TalkAssignment(a1, d5),
                    new TalkAssignment(a2, d6),
                    new TalkAssignment(a3, d7),
                    new TalkAssignment(a4, d8),
                    new TalkAssignment(a5, d9),
                    new TalkAssignment(a6, d10),
                    new TalkAssignment(a7, d11)
                )
            }
        };
    }

    @Test(dataProvider="talkAssignmentsData")
    public void talkAssignmentsTest(
        final BufferedReader assignmentReader,
        final List<LocalDateTime> dates,
        final List<TalkAssignment> expected
    ) throws IOException {
        Assert.assertEquals(new TalkAssignments(assignmentReader, dates), expected);
    }

    @DataProvider
    public Object[][] toLocalDateTimeData() {
        return new Object[][] {
            {
                "24101109454",
                List.of(
                    LocalDateTime.of(2024, 10, 11, 9, 45),
                    LocalDateTime.of(2024, 10, 11, 10, 30),
                    LocalDateTime.of(2024, 10, 11, 11, 30),
                    LocalDateTime.of(2024, 10, 11, 12, 15)
                )
            }
        };
    }

    @Test(dataProvider="toLocalDateTimeData")
    public void toLocalDateTimeTest(final String date, final List<LocalDateTime> expected) throws IOException {
        Assert.assertEquals(TalkAssignments.toLocalDateTime(date).toList(), expected);
    }

}
